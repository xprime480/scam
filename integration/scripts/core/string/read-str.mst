Read operations

;[skip] uncomment to skip this test

[name]
Read operations on strings

[input]

(define **top** ())

(call/cc
 (lambda (k)
   (set! **top** k)))

(define handler
  (lambda (err)
    (**top** (error-category err))))

(define test "hello, world")

(with-exception-handler handler (lambda () (string-length :i-am-no-string)))
(string-length "")
(string-length test)
(string-ref "" 0)
(string-ref test -1)
(string-ref test 99)
(string-ref test 0)
(string-ref test 4)
;;(string-ref test 6) ;; want a better representation of a space

[result]
[keep 8]
:args
0
12
string-ref: wanted index into parameter 1 ('""') for parameter 2 (0)
string-ref: wanted index into parameter 1 ('"hello, world"') for parameter 2 (-1)
string-ref: wanted index into parameter 1 ('"hello, world"') for parameter 2 (99)
#\h
#\o
