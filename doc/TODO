
* Eventually this will be a Scheme interpreter fully compliant
  with R7RS

* Remove unneeded classes.

* Make ArgParser classes return something other than nullptr for failed
      parses.
  ** partially done -- still needs to be done when the return value
     is a parser.

* Finish with the merge of branch arg-parse into arg-parse-2
  ** Then implement define-syntax

* Make ScamCharacter output be readable by reader for non-printable
  characters

* Instead of single continuation, pass along a block that has at least
  a success and an error continuation.

* Remove class unit/TestHook.  Update:  Not sure how I imagined this
  to be done.  Tests still require it.

* The various WorkerData structures are probably an anti-pattern.
  Look at removing them.

* I think Undefine will be incorrect in the event of backtracking.
  Should the form be redefined when backtracking?

* Validate that arguments to ScamClass::apply should not be evaluated
  twice.  The current code seems to mapEval once in the class and once
  in the instance.

* Can validateClosureArgs be refactored or eliminated somehow?

* "Parsers" should probably be renamed "Validators"

* Think of a way to reduce the redundancy between Ports and CharStreams.
  Maybe CharStreams can be eliminated.

* Fix the build process -- some files are recompiled even when it is not
  necessary to do so.

* '{:a 1}' does not scan as a dictionary literal but '{ :a 1 }'.  Make
  the former work.

* Need a better unit test framework.  Current one is too much boilerplate.
  A pure scam framework would be ideal :).

* Is it worth it to make the ScamInstance a global parameter, and make it
  the only way.  Is it really ever going to be necessary to have more than
  one engine at once?

* ClassInitWorker::run could probably use the original continuation and
  not need ClassInitCont.  See comments in the latter implementation file.

* Error values need to be able to be created outside the garbage collector
  framework so that they can be kept statically.
