
* Eventually this will be a Scheme interpreter fully compliant
  with R7RS

* Make ScamCharacter output be readable by reader for non-printable
  characters

* Instead of single continuation, pass along a block that has at least
  a success and an error continuation.  (MAYBE...)

* I think Undefine will be incorrect in the event of backtracking.
  Should the form be redefined when backtracking?

* Think of a way to reduce the redundancy between Ports and CharStreams.
  Maybe CharStreams can be eliminated.

* Fix the build process -- some files are recompiled even when it is not
  necessary to do so.

* Is it worth it to make the ScamEngine a global parameter, and make it
  the only way.  Is it really ever going to be necessary to have more than
  one engine at a time?

* ClassInitWorker::run could probably use the original continuation and
  not need ClassInitCont.  See comments in the latter implementation file.

* Position control in ScamPort objects will probably not work correctly
  if two+ views are created on one simultaneously.  Fix it.

* Check that tail-calls are properly handled.

* When an error is reported, the REPL displays the last non-error result.
  It should not display anything additional.

* Look at refactoring the composite test cases in
  .../scam/tests/core/pred/eqivalance/

* Caching for values other than characters.  Some unexplained seg fault
  occurs when symbols are cached.

* Fix test pythag2.scm.  It randomly (??) causes segmentation violations.

* (environment ...) forms aren't getting captured in let expression.  See,
  e.g., barrels2.scm for example of where they could be useful.

* Some backtracking tests are being skipped.  Find out why and fix.
