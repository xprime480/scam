(import (only (scheme base)
              append
              car
              cdr
              cons
              list
              not
              map
              null?)
        (scheme eval)
        (only (scheme repl)
              interaction-environment)
        (only (scam base)
              filter
              reduce)
        (only (scam backtrack)
              amb))

(define (cross fn fst snd)
  (if (or (null? fst) (null? snd))
      '()
      (reduce append
              '()
              (map (lambda (fitem)
                     (map (lambda (sitem)
                            (fn fitem sitem))
                          snd))
                   fst))))

(define (power-set elts)
  (if (null? elts)
      (list '())
      (let ((first (list (car elts)))
            (pscdr (power-set (cdr elts))))
        (append pscdr
                (cross (lambda (item elts) (cons item elts))
                       first
                       pscdr)))))

(define (some-of lst)
  (let ((ffn (lambda (item)
               (not (null? item))))
        (mfn (lambda (item)
               `(quote ,item))))
    (eval `(amb ,@(map mfn (filter ffn (power-set lst))))
          (environment '(only (scam backtrack) amb)))))
